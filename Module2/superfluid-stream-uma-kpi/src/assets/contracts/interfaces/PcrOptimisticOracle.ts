/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type OPTIMISTICORACLEINPUTStruct = {
  finder: string;
  target: BigNumberish;
  targetCondition: BigNumberish;
  rewardAmount: BigNumberish;
  interval: BigNumberish;
  optimisticOracleLivenessTime: BigNumberish;
  priceIdentifier: BytesLike;
  priceType: BigNumberish;
  customAncillaryData: BytesLike;
};

export type OPTIMISTICORACLEINPUTStructOutput = [
  string,
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  number,
  string
] & {
  finder: string;
  target: BigNumber;
  targetCondition: number;
  rewardAmount: BigNumber;
  interval: BigNumber;
  optimisticOracleLivenessTime: BigNumber;
  priceIdentifier: string;
  priceType: number;
  customAncillaryData: string;
};

export type PCROPTIMISTICORACLEINITIALIZERStruct = {
  admin: string;
  rewardId: BigNumberish;
  tokenContract: string;
  rewardToken: string;
  optimisticOracleInput: OPTIMISTICORACLEINPUTStruct;
};

export type PCROPTIMISTICORACLEINITIALIZERStructOutput = [
  string,
  BigNumber,
  string,
  string,
  OPTIMISTICORACLEINPUTStructOutput
] & {
  admin: string;
  rewardId: BigNumber;
  tokenContract: string;
  rewardToken: string;
  optimisticOracleInput: OPTIMISTICORACLEINPUTStructOutput;
};

export interface PcrOptimisticOracleInterface extends utils.Interface {
  functions: {
    "ANCILLARY_BYTES_RESERVE()": FunctionFragment;
    "MAXIMUM_LIVENESS()": FunctionFragment;
    "MINIMUM_LIVENESS()": FunctionFragment;
    "TOKEN_INDEX_PUBLISHER_ADDRESS()": FunctionFragment;
    "_proposalId()": FunctionFragment;
    "ancillaryBytesLimit()": FunctionFragment;
    "changeTarget(int256,uint8)": FunctionFragment;
    "depositReward(uint256)": FunctionFragment;
    "disputeDistribution()": FunctionFragment;
    "executeDistribution()": FunctionFragment;
    "finder()": FunctionFragment;
    "initialize((address,uint256,address,address,(address,int256,uint8,uint256,uint256,uint256,bytes32,uint8,bytes)))": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "optimisticOracle()": FunctionFragment;
    "pcrId()": FunctionFragment;
    "priceDisputed(bytes32,uint256,bytes,uint256)": FunctionFragment;
    "proposal()": FunctionFragment;
    "proposeDistribution(int256)": FunctionFragment;
    "reward()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "store()": FunctionFragment;
    "switchRewardStatus()": FunctionFragment;
    "syncUmaEcosystemParams()": FunctionFragment;
    "updateRewardAmount(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ANCILLARY_BYTES_RESERVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAXIMUM_LIVENESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_LIVENESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_INDEX_PUBLISHER_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_proposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ancillaryBytesLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeTarget",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PCROPTIMISTICORACLEINITIALIZERStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "optimisticOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pcrId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceDisputed",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "proposal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeDistribution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "reward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "store", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "switchRewardStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "syncUmaEcosystemParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardAmount",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ANCILLARY_BYTES_RESERVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAXIMUM_LIVENESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_LIVENESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_INDEX_PUBLISHER_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_proposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ancillaryBytesLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optimisticOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pcrId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceDisputed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "switchRewardStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncUmaEcosystemParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardAmount",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PcrOptimisticOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PcrOptimisticOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ANCILLARY_BYTES_RESERVE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAXIMUM_LIVENESS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMUM_LIVENESS(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOKEN_INDEX_PUBLISHER_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    _proposalId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    ancillaryBytesLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeTarget(
      _newTarget: BigNumberish,
      _newTargetCondition: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositReward(
      depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disputeDistribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeDistribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      optimisticOracleinitializer: PCROPTIMISTICORACLEINITIALIZERStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    optimisticOracle(overrides?: CallOverrides): Promise<[string]>;

    pcrId(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceDisputed(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      refund: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposal(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        pcrId: BigNumber;
        proposalId: BigNumber;
        timestamp: BigNumber;
      }
    >;

    proposeDistribution(
      _proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reward(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        string,
        BigNumber,
        number,
        number,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        rewardStep: number;
        rewardStatus: number;
        admin: string;
        target: BigNumber;
        targetCondition: number;
        priceType: number;
        rewardToken: string;
        rewardAmount: BigNumber;
        interval: BigNumber;
        earliestNextAction: BigNumber;
        optimisticOracleLivenessTime: BigNumber;
        priceIdentifier: string;
        customAncillaryData: string;
      }
    >;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    store(overrides?: CallOverrides): Promise<[string]>;

    switchRewardStatus(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    syncUmaEcosystemParams(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRewardAmount(
      newRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ANCILLARY_BYTES_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

  MAXIMUM_LIVENESS(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_LIVENESS(overrides?: CallOverrides): Promise<BigNumber>;

  TOKEN_INDEX_PUBLISHER_ADDRESS(overrides?: CallOverrides): Promise<string>;

  _proposalId(overrides?: CallOverrides): Promise<BigNumber>;

  ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

  changeTarget(
    _newTarget: BigNumberish,
    _newTargetCondition: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositReward(
    depositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disputeDistribution(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeDistribution(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finder(overrides?: CallOverrides): Promise<string>;

  initialize(
    optimisticOracleinitializer: PCROPTIMISTICORACLEINITIALIZERStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  optimisticOracle(overrides?: CallOverrides): Promise<string>;

  pcrId(overrides?: CallOverrides): Promise<BigNumber>;

  priceDisputed(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    refund: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposal(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      pcrId: BigNumber;
      proposalId: BigNumber;
      timestamp: BigNumber;
    }
  >;

  proposeDistribution(
    _proposedPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reward(
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      string,
      BigNumber,
      number,
      number,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      rewardStep: number;
      rewardStatus: number;
      admin: string;
      target: BigNumber;
      targetCondition: number;
      priceType: number;
      rewardToken: string;
      rewardAmount: BigNumber;
      interval: BigNumber;
      earliestNextAction: BigNumber;
      optimisticOracleLivenessTime: BigNumber;
      priceIdentifier: string;
      customAncillaryData: string;
    }
  >;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  store(overrides?: CallOverrides): Promise<string>;

  switchRewardStatus(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  syncUmaEcosystemParams(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRewardAmount(
    newRewardAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ANCILLARY_BYTES_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_LIVENESS(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_LIVENESS(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_INDEX_PUBLISHER_ADDRESS(overrides?: CallOverrides): Promise<string>;

    _proposalId(overrides?: CallOverrides): Promise<BigNumber>;

    ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

    changeTarget(
      _newTarget: BigNumberish,
      _newTargetCondition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositReward(
      depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    disputeDistribution(overrides?: CallOverrides): Promise<void>;

    executeDistribution(overrides?: CallOverrides): Promise<void>;

    finder(overrides?: CallOverrides): Promise<string>;

    initialize(
      optimisticOracleinitializer: PCROPTIMISTICORACLEINITIALIZERStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    optimisticOracle(overrides?: CallOverrides): Promise<string>;

    pcrId(overrides?: CallOverrides): Promise<BigNumber>;

    priceDisputed(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      refund: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposal(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        pcrId: BigNumber;
        proposalId: BigNumber;
        timestamp: BigNumber;
      }
    >;

    proposeDistribution(
      _proposedPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reward(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        string,
        BigNumber,
        number,
        number,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        rewardStep: number;
        rewardStatus: number;
        admin: string;
        target: BigNumber;
        targetCondition: number;
        priceType: number;
        rewardToken: string;
        rewardAmount: BigNumber;
        interval: BigNumber;
        earliestNextAction: BigNumber;
        optimisticOracleLivenessTime: BigNumber;
        priceIdentifier: string;
        customAncillaryData: string;
      }
    >;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    store(overrides?: CallOverrides): Promise<string>;

    switchRewardStatus(overrides?: CallOverrides): Promise<void>;

    syncUmaEcosystemParams(overrides?: CallOverrides): Promise<void>;

    updateRewardAmount(
      newRewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    ANCILLARY_BYTES_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_LIVENESS(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_LIVENESS(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_INDEX_PUBLISHER_ADDRESS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _proposalId(overrides?: CallOverrides): Promise<BigNumber>;

    ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

    changeTarget(
      _newTarget: BigNumberish,
      _newTargetCondition: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositReward(
      depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disputeDistribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeDistribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      optimisticOracleinitializer: PCROPTIMISTICORACLEINITIALIZERStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    optimisticOracle(overrides?: CallOverrides): Promise<BigNumber>;

    pcrId(overrides?: CallOverrides): Promise<BigNumber>;

    priceDisputed(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      refund: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposal(overrides?: CallOverrides): Promise<BigNumber>;

    proposeDistribution(
      _proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reward(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    store(overrides?: CallOverrides): Promise<BigNumber>;

    switchRewardStatus(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    syncUmaEcosystemParams(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRewardAmount(
      newRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ANCILLARY_BYTES_RESERVE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAXIMUM_LIVENESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINIMUM_LIVENESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN_INDEX_PUBLISHER_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _proposalId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ancillaryBytesLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeTarget(
      _newTarget: BigNumberish,
      _newTargetCondition: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositReward(
      depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disputeDistribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeDistribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      optimisticOracleinitializer: PCROPTIMISTICORACLEINITIALIZERStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    optimisticOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pcrId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceDisputed(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      refund: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeDistribution(
      _proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    store(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    switchRewardStatus(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    syncUmaEcosystemParams(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardAmount(
      newRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

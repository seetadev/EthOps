"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("./types");
var resolutionError_1 = __importStar(require("./errors/resolutionError"));
var utils_1 = require("./utils");
var publicTypes_1 = require("./types/publicTypes");
var TwitterSignatureValidator_1 = require("./utils/TwitterSignatureValidator");
var FetchProvider_1 = __importDefault(require("./FetchProvider"));
var namehash_1 = require("./utils/namehash");
var NamingService_1 = require("./NamingService");
var configurationError_1 = __importStar(require("./errors/configurationError"));
var UnsInternal_1 = __importDefault(require("./UnsInternal"));
var Networking_1 = __importDefault(require("./utils/Networking"));
var resolver_keys_json_1 = __importDefault(require("./config/resolver-keys.json"));
/**
 * @internal
 */
var Uns = /** @class */ (function (_super) {
    __extends(Uns, _super);
    function Uns(source) {
        var _this = _super.call(this) || this;
        _this.name = publicTypes_1.NamingServiceName.UNS;
        if (source &&
            source.locations &&
            (!source.locations.Layer1 || !source.locations.Layer2)) {
            throw new configurationError_1.default(configurationError_1.ConfigurationErrorCode.NetworkConfigMissing, {
                method: publicTypes_1.NamingServiceName.UNS,
                config: !source.locations.Layer1 ? 'Layer1' : 'Layer2',
            });
        }
        if (!source) {
            source = {
                locations: {
                    Layer1: {
                        url: UnsInternal_1.default.UrlMap['mainnet'],
                        network: 'mainnet',
                    },
                    Layer2: {
                        url: UnsInternal_1.default.UrlMap['polygon-mainnet'],
                        network: 'polygon-mainnet',
                    },
                },
            };
        }
        _this.unsl1 = new UnsInternal_1.default(publicTypes_1.UnsLocation.Layer1, source.locations.Layer1, publicTypes_1.BlockchainType.ETH);
        _this.unsl2 = new UnsInternal_1.default(publicTypes_1.UnsLocation.Layer2, source.locations.Layer2, publicTypes_1.BlockchainType.MATIC);
        return _this;
    }
    Uns.autoNetwork = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var providerLayer1, providerLayer2, networkIdLayer1, networkIdLayer2, networkNameLayer1, networkNameLayer2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if ((0, types_1.hasProvider)(config.locations.Layer1) &&
                            (0, types_1.hasProvider)(config.locations.Layer2)) {
                            providerLayer1 = config.locations.Layer1.provider;
                            providerLayer2 = config.locations.Layer2.provider;
                        }
                        else {
                            if (!config.locations.Layer1['url'] || !config.locations.Layer2['url']) {
                                throw new configurationError_1.default(configurationError_1.ConfigurationErrorCode.UnspecifiedUrl, {
                                    method: publicTypes_1.NamingServiceName.UNS,
                                });
                            }
                            providerLayer1 = FetchProvider_1.default.factory(publicTypes_1.NamingServiceName.UNS, config.locations.Layer1['url']);
                            providerLayer2 = FetchProvider_1.default.factory(publicTypes_1.NamingServiceName.UNS, config.locations.Layer2['url']);
                        }
                        return [4 /*yield*/, providerLayer1.request({
                                method: 'net_version',
                            })];
                    case 1:
                        networkIdLayer1 = (_a.sent());
                        return [4 /*yield*/, providerLayer2.request({
                                method: 'net_version',
                            })];
                    case 2:
                        networkIdLayer2 = (_a.sent());
                        networkNameLayer1 = utils_1.EthereumNetworksInverted[networkIdLayer1];
                        networkNameLayer2 = utils_1.EthereumNetworksInverted[networkIdLayer2];
                        if (!networkNameLayer1 ||
                            !types_1.UnsSupportedNetwork.guard(networkNameLayer1) ||
                            !networkNameLayer2 ||
                            !types_1.UnsSupportedNetwork.guard(networkNameLayer2)) {
                            throw new configurationError_1.default(configurationError_1.ConfigurationErrorCode.UnsupportedNetwork, {
                                method: publicTypes_1.NamingServiceName.UNS,
                            });
                        }
                        return [2 /*return*/, new this({
                                locations: {
                                    Layer1: { network: networkNameLayer1, provider: providerLayer1 },
                                    Layer2: { network: networkNameLayer2, provider: providerLayer2 },
                                },
                            })];
                }
            });
        });
    };
    Uns.prototype.namehash = function (domain) {
        if (!this.checkDomain(domain)) {
            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.UnsupportedDomain, {
                domain: domain,
            });
        }
        return (0, namehash_1.eip137Namehash)(domain);
    };
    Uns.prototype.childhash = function (parentHash, label) {
        return (0, namehash_1.eip137Childhash)(parentHash, label);
    };
    Uns.prototype.isSupportedDomain = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var tld, _a, existsL1, existsL2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.checkDomain(domain)) {
                            return [2 /*return*/, false];
                        }
                        tld = domain.split('.').pop();
                        if (!tld) {
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, Promise.all([
                                this.unsl1.exists(tld),
                                this.unsl2.exists(tld),
                            ])];
                    case 1:
                        _a = _b.sent(), existsL1 = _a[0], existsL2 = _a[1];
                        return [2 /*return*/, existsL1 || existsL2];
                }
            });
        });
    };
    Uns.prototype.owner = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenId, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tokenId = this.namehash(domain);
                        return [4 /*yield*/, this.get(tokenId, [])];
                    case 1:
                        data = _a.sent();
                        if ((0, utils_1.isNullAddress)(data.owner)) {
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.UnregisteredDomain, {
                                domain: domain,
                            });
                        }
                        return [2 /*return*/, data.owner];
                }
            });
        });
    };
    Uns.prototype.resolver = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getVerifiedData(domain)];
                    case 1: return [2 /*return*/, (_a.sent()).resolver];
                }
            });
        });
    };
    Uns.prototype.record = function (domain, key) {
        return __awaiter(this, void 0, void 0, function () {
            var returnee;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.records(domain, [key])];
                    case 1:
                        returnee = (_a.sent())[key];
                        if (!returnee) {
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.RecordNotFound, {
                                recordName: key,
                                domain: domain,
                            });
                        }
                        return [2 /*return*/, returnee];
                }
            });
        });
    };
    Uns.prototype.records = function (domain, keys) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getVerifiedData(domain, keys)];
                    case 1: return [2 /*return*/, (_a.sent()).records];
                }
            });
        });
    };
    Uns.prototype.allRecords = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenId, metadata;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tokenId = this.namehash(domain);
                        return [4 /*yield*/, this.getMetadata(tokenId)];
                    case 1:
                        metadata = _a.sent();
                        return [2 /*return*/, this.records(domain, __spreadArray(__spreadArray([], Object.keys(resolver_keys_json_1.default.keys), true), Object.keys(metadata.properties.records), true))];
                }
            });
        });
    };
    Uns.prototype.twitter = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenId, keys, data, records, location, validationSignature, twitterHandle, owner;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tokenId = this.namehash(domain);
                        keys = [
                            'validation.social.twitter.username',
                            'social.twitter.username',
                        ];
                        return [4 /*yield*/, this.getVerifiedData(domain, keys)];
                    case 1:
                        data = _a.sent();
                        records = data.records, location = data.location;
                        validationSignature = records['validation.social.twitter.username'];
                        twitterHandle = records['social.twitter.username'];
                        if ((0, utils_1.isNullAddress)(validationSignature)) {
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.RecordNotFound, {
                                domain: domain,
                                location: location,
                                recordName: 'validation.social.twitter.username',
                            });
                        }
                        if (!twitterHandle) {
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.RecordNotFound, {
                                domain: domain,
                                location: location,
                                recordName: 'social.twitter.username',
                            });
                        }
                        owner = data.owner;
                        if (!(0, TwitterSignatureValidator_1.isValidTwitterSignature)({
                            tokenId: tokenId,
                            owner: owner,
                            twitterHandle: twitterHandle,
                            validationSignature: validationSignature,
                        })) {
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.InvalidTwitterVerification, {
                                domain: domain,
                            });
                        }
                        return [2 /*return*/, twitterHandle];
                }
            });
        });
    };
    Uns.prototype.reverse = function (address, currencyTicker) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.UnsupportedMethod, {
                    methodName: 'reverse',
                });
            });
        });
    };
    Uns.prototype.isRegistered = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenId, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tokenId = this.namehash(domain);
                        return [4 /*yield*/, this.get(tokenId, [])];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, !(0, utils_1.isNullAddress)(data.owner)];
                }
            });
        });
    };
    Uns.prototype.getTokenUri = function (tokenId) {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function () {
            var _b, _c, result, tokenUri, e_1_1;
            var _this = this;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 5, 6, 11]);
                        _b = __asyncValues([
                            (0, utils_1.wrapResult)(function () { return _this.unsl2.getTokenUri(tokenId); }),
                            (0, utils_1.wrapResult)(function () { return _this.unsl1.getTokenUri(tokenId); }),
                        ]);
                        _d.label = 1;
                    case 1: return [4 /*yield*/, _b.next()];
                    case 2:
                        if (!(_c = _d.sent(), !_c.done)) return [3 /*break*/, 4];
                        result = _c.value;
                        tokenUri = (0, utils_1.unwrapResult)(result);
                        if (tokenUri) {
                            return [2 /*return*/, tokenUri];
                        }
                        _d.label = 3;
                    case 3: return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 11];
                    case 5:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 11];
                    case 6:
                        _d.trys.push([6, , 9, 10]);
                        if (!(_c && !_c.done && (_a = _b.return))) return [3 /*break*/, 8];
                        return [4 /*yield*/, _a.call(_b)];
                    case 7:
                        _d.sent();
                        _d.label = 8;
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 10: return [7 /*endfinally*/];
                    case 11: 
                    // Note: if a token doesn't exist, ProxyReader returns an empty string. If both responses are empty,
                    // we know for sure that the domain isn't registered.
                    throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.UnregisteredDomain, {
                        domain: "with tokenId ".concat(tokenId),
                    });
                }
            });
        });
    };
    Uns.prototype.isAvailable = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.isRegistered(domain)];
                    case 1: return [2 /*return*/, !(_a.sent())];
                }
            });
        });
    };
    Uns.prototype.registryAddress = function (domainOrNamehash) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, resultOrErrorL1, resultOrErrorL2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.unsl1.registryAddress(domainOrNamehash).catch(function (err) { return err; }),
                            this.unsl2.registryAddress(domainOrNamehash).catch(function (err) { return err; }),
                        ])];
                    case 1:
                        _a = _b.sent(), resultOrErrorL1 = _a[0], resultOrErrorL2 = _a[1];
                        if (resultOrErrorL2 instanceof Error) {
                            validResolutionErrorOrThrow(resultOrErrorL2, resolutionError_1.ResolutionErrorCode.UnregisteredDomain);
                        }
                        else if (!(0, utils_1.isNullAddress)(resultOrErrorL2)) {
                            return [2 /*return*/, resultOrErrorL2];
                        }
                        return [2 /*return*/, validResultOrThrow(resultOrErrorL1)];
                }
            });
        });
    };
    Uns.prototype.locations = function (domains) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, resultL1, resultL2, nonEmptyRecordsFromL2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.unsl1.locations(domains),
                            this.unsl2.locations(domains),
                        ])];
                    case 1:
                        _a = _b.sent(), resultL1 = _a[0], resultL2 = _a[1];
                        nonEmptyRecordsFromL2 = Object.keys(resultL2)
                            .filter(function (k) { return resultL2[k] != null; })
                            .reduce(function (a, k) {
                            var _a;
                            return (__assign(__assign({}, a), (_a = {}, _a[k] = resultL2[k], _a)));
                        }, {});
                        return [2 /*return*/, __assign(__assign({}, resultL1), nonEmptyRecordsFromL2)];
                }
            });
        });
    };
    Uns.prototype.reverseOf = function (addr, location) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, resultOrErrorL1, resultOrErrorL2, reverseL1, reverseL2, reversedL1, reversedL2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.unsl1.reverseOf(addr).catch(function (err) { return err; }),
                            this.unsl2.reverseOf(addr).catch(function (err) { return err; }),
                        ])];
                    case 1:
                        _a = _b.sent(), resultOrErrorL1 = _a[0], resultOrErrorL2 = _a[1];
                        reverseL1 = function () {
                            validResultOrThrow(resultOrErrorL1);
                            if (resultOrErrorL1._hex !== '0x00') {
                                return (0, namehash_1.fromHexStringToDecimals)(resultOrErrorL1._hex);
                            }
                            else {
                                return null;
                            }
                        };
                        reverseL2 = function () {
                            validResultOrThrow(resultOrErrorL2);
                            if (resultOrErrorL2._hex !== '0x00') {
                                return (0, namehash_1.fromHexStringToDecimals)(resultOrErrorL2._hex);
                            }
                            else {
                                return null;
                            }
                        };
                        if (location === publicTypes_1.UnsLocation.Layer1) {
                            return [2 /*return*/, reverseL1()];
                        }
                        if (location === publicTypes_1.UnsLocation.Layer2) {
                            return [2 /*return*/, reverseL2()];
                        }
                        reversedL1 = reverseL1();
                        if (reversedL1) {
                            return [2 /*return*/, reversedL1];
                        }
                        reversedL2 = reverseL2();
                        if (reversedL2) {
                            return [2 /*return*/, reversedL2];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    Uns.prototype.getDomainFromTokenId = function (tokenId) {
        return __awaiter(this, void 0, void 0, function () {
            var metadata;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getMetadata(tokenId)];
                    case 1:
                        metadata = _a.sent();
                        if (this.namehash(metadata.name) !== tokenId) {
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.ServiceProviderError, {
                                methodName: 'unhash',
                                domain: metadata.name,
                                providerMessage: 'Service provider returned an invalid domain name',
                            });
                        }
                        return [2 /*return*/, metadata.name];
                }
            });
        });
    };
    Uns.prototype.getMetadata = function (tokenId) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenUri, resp, metadata;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTokenUri(tokenId)];
                    case 1:
                        tokenUri = _a.sent();
                        return [4 /*yield*/, Networking_1.default.fetch(tokenUri, {}).catch(function (err) {
                                throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.MetadataEndpointError, {
                                    tokenUri: tokenUri || 'undefined',
                                    errorMessage: err.message,
                                });
                            })];
                    case 2:
                        resp = _a.sent();
                        if (!resp.ok) {
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.MetadataEndpointError, {
                                tokenUri: tokenUri || 'undefined',
                            });
                        }
                        return [4 /*yield*/, resp.json()];
                    case 3:
                        metadata = _a.sent();
                        if (!metadata.name) {
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.UnregisteredDomain, {
                                domain: "with tokenId ".concat(tokenId),
                            });
                        }
                        if (this.namehash(metadata.name) !== tokenId) {
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.ServiceProviderError, {
                                methodName: 'unhash',
                                domain: metadata.name,
                                providerMessage: 'Service provider returned an invalid domain name',
                            });
                        }
                        return [2 /*return*/, metadata];
                }
            });
        });
    };
    Uns.prototype.getVerifiedData = function (domain, keys) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenId, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tokenId = this.namehash(domain);
                        return [4 /*yield*/, this.get(tokenId, keys)];
                    case 1:
                        data = _a.sent();
                        if ((0, utils_1.isNullAddress)(data.resolver)) {
                            if ((0, utils_1.isNullAddress)(data.owner)) {
                                throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.UnregisteredDomain, {
                                    domain: domain,
                                });
                            }
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.UnspecifiedResolver, {
                                location: data.location,
                                domain: domain,
                            });
                        }
                        return [2 /*return*/, data];
                }
            });
        });
    };
    Uns.prototype.get = function (tokenId, keys) {
        if (keys === void 0) { keys = []; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, resultOrErrorL1, resultOrErrorL2, resolverL2, ownerL2, recordsL2, resolverL1, ownerL1, recordsL1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.unsl1.get(tokenId, keys).catch(function (err) { return err; }),
                            this.unsl2.get(tokenId, keys).catch(function (err) { return err; }),
                        ])];
                    case 1:
                        _a = _b.sent(), resultOrErrorL1 = _a[0], resultOrErrorL2 = _a[1];
                        validResultOrThrow(resultOrErrorL2);
                        resolverL2 = resultOrErrorL2.resolver, ownerL2 = resultOrErrorL2.owner, recordsL2 = resultOrErrorL2.records;
                        if (!(0, utils_1.isNullAddress)(ownerL2)) {
                            return [2 /*return*/, {
                                    resolver: resolverL2,
                                    owner: ownerL2,
                                    records: (0, utils_1.constructRecords)(keys, recordsL2),
                                    location: publicTypes_1.UnsLocation.Layer2,
                                }];
                        }
                        validResultOrThrow(resultOrErrorL1);
                        resolverL1 = resultOrErrorL1.resolver, ownerL1 = resultOrErrorL1.owner, recordsL1 = resultOrErrorL1.records;
                        return [2 /*return*/, {
                                resolver: resolverL1,
                                owner: ownerL1,
                                records: (0, utils_1.constructRecords)(keys, recordsL1),
                                location: publicTypes_1.UnsLocation.Layer1,
                            }];
                }
            });
        });
    };
    Uns.prototype.checkDomain = function (domain, passIfTokenID) {
        if (passIfTokenID === void 0) { passIfTokenID = false; }
        if (passIfTokenID) {
            return true;
        }
        var tokens = domain.split('.');
        return (!!tokens.length &&
            !(domain === 'eth' ||
                /^[^-]*[^-]*\.(eth|luxe|xyz|kred|addr\.reverse)$/.test(domain)) &&
            tokens.every(function (v) { return !!v.length; }));
    };
    return Uns;
}(NamingService_1.NamingService));
exports.default = Uns;
function validResultOrThrow(resultOrError) {
    if (resultOrError instanceof Error) {
        throw resultOrError;
    }
    return resultOrError;
}
function validResolutionErrorOrThrow(error, validCode) {
    if (!(error instanceof resolutionError_1.default)) {
        throw error;
    }
    if (error.code === validCode) {
        return true;
    }
    throw error;
}

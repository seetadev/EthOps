import { CryptoRecords, NamingServiceName } from '../types/publicTypes';
import { UnsSupportedNetwork } from '../types';
declare type Providers = 'infura' | 'alchemy';
export declare function signedLink(key: string, network?: UnsSupportedNetwork, provider?: Providers): string;
export declare function hexToBytes(hexString: string): number[];
export declare function isNullAddress(key: string | null | undefined): key is undefined | null;
export declare function constructRecords(keys: string[], values: undefined | (string | undefined)[] | CryptoRecords): CryptoRecords;
export declare const domainExtensionToNamingServiceName: {
    crypto: NamingServiceName;
    zil: NamingServiceName;
};
export declare const findNamingServiceName: (domain: string) => NamingServiceName | '';
export declare const EthereumNetworks: {
    readonly mainnet: 1;
    readonly ropsten: 3;
    readonly rinkeby: 4;
    readonly goerli: 5;
    readonly 'polygon-mainnet': 137;
    readonly 'polygon-mumbai': 80001;
};
export declare const EthereumNetworksInverted: {
    readonly 1: "mainnet";
    readonly 3: "ropsten";
    readonly 4: "rinkeby";
    readonly 5: "goerli";
    readonly 137: "polygon-mainnet";
    readonly 80001: "polygon-mumbai";
};
export declare const wrapResult: <T>(func: () => T) => Promise<WrappedResult<T>>;
export declare const unwrapResult: <T>(wrappedResult: WrappedResult<T>) => UnwrapPromise<T>;
export declare type WrappedResult<T> = {
    result: UnwrapPromise<T>;
    error: null;
} | {
    result: null;
    error: Error;
};
export declare type UnwrapPromise<T> = T extends Promise<infer U> ? U : T;
export {};

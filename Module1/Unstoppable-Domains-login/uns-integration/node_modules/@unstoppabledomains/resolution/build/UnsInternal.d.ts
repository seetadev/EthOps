import { BlockhainNetworkUrlMap, ProxyReaderMap } from './types';
import { UnsLayerSource } from './types/publicTypes';
import { BlockchainType, DomainData, Locations, UnsLocation } from './types/publicTypes';
import FetchProvider from './FetchProvider';
import EthereumContract from './contracts/EthereumContract';
export default class UnsInternal {
    static readonly ProxyReaderMap: ProxyReaderMap;
    static readonly UrlMap: BlockhainNetworkUrlMap;
    readonly network: string;
    readonly url: string;
    readonly provider: FetchProvider;
    readonly readerContract: EthereumContract;
    readonly unsLocation: UnsLocation;
    readonly blockchain: BlockchainType;
    constructor(unsLocation: UnsLocation, source: UnsLayerSource, blockchain: BlockchainType);
    exists(domain: string): Promise<boolean>;
    reverseOf(addr: string): Promise<{
        _hex: string;
    }>;
    getTokenUri(tokenId: string): Promise<string>;
    registryAddress(domainOrNamehash: string): Promise<string>;
    resolver(domain: string): Promise<string>;
    get(tokenId: string, keys?: string[]): Promise<DomainData>;
    locations(domains: string[]): Promise<Locations>;
    namehash(domain: string): string;
    private checkDomain;
    private getVerifiedData;
    private checkNetworkConfig;
    private checkCustomNetworkConfig;
    private isValidProxyReader;
}

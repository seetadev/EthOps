declare const crypto: {
    createCodeChallengeAndVerifier: (length?: number, method?: import("..").CodeChallengeMethod) => Promise<{
        verifier: string;
        challenge: string;
    }>;
    getCrypto: () => Crypto;
    getCryptoSubtle: () => SubtleCrypto;
    getRandomBytes: (length: number) => Uint8Array;
    sha256: (buf: ArrayBuffer) => Promise<ArrayBuffer>;
    verifyIdToken: (jwks_uri: string, id_token: string, nonce: string, client_id: string) => Promise<import("@uauth/common").IdToken>;
};
declare const encoding: {
    decodeState: <T>(state: string) => T;
    encodeState: <T_1>(state: T_1) => string;
    fromBase64: (str: string) => string;
    textDecoder: TextDecoder;
    textEncoder: TextEncoder;
    toBase64: (str: string) => string;
    toUrlEncodedBase64: (str: string) => string;
    stringFromBuffer: (buf: ArrayBuffer) => string;
};
export { default as getSortedScope } from './getSortedScope';
export { default as getWindow } from './getWindow';
export { default as objectFromEntries } from './objectFromEntries';
export { default as objectFromURLSearchParams } from './objectFromURLSearchParams';
export { default as objectToKey } from './objectToKey';
export { default as retry } from './retry';
export { default as uniqueElementsFromArray } from './uniqueElementsFromArray';
export { crypto, encoding };

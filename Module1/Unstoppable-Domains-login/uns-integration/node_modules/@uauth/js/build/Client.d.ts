import { DomainResolver, IssuerResolver } from '@uauth/common';
import { Api, AuthorizeRequest, AuthorizeResponse, LogoutRequest, LogoutResponse, PopupConfig } from './api';
import { Store, StoreType } from './store';
import { Authorization, AuthorizationOptions, VerifiedAddress, BaseLoginOptions, BaseLogoutOptions, CacheOptions, ClientOptions, LoginCallbackOptions, LoginCallbackResponse, LoginOptions, LogoutCallbackOptions, LogoutOptions, UserInfo, UserOptions } from './types';
import * as util from './util';
export default class Client {
    util: typeof util;
    private _clientStore;
    api: Api;
    fallbackIssuer: string;
    fallbackLoginOptions: BaseLoginOptions;
    fallbackLogoutOptions: BaseLogoutOptions;
    cacheOptions: CacheOptions;
    issuerResolver: IssuerResolver;
    resolution: DomainResolver;
    store?: Store;
    storeOptions: {
        store?: Store;
        storeType: StoreType;
    };
    getStore(): Store;
    constructor(options: ClientOptions);
    buildAuthorizeRequest(options: Partial<LoginOptions>): Promise<AuthorizeRequest>;
    loginWithPopup(options?: Partial<Omit<LoginOptions, 'responseMode'>>, config?: PopupConfig): Promise<Authorization>;
    login(options?: Partial<LoginOptions>): Promise<void>;
    loginCallback<T>(options?: Partial<LoginCallbackOptions>): Promise<LoginCallbackResponse<T>>;
    verifyAuthorizeResponse(request: AuthorizeRequest, response: AuthorizeResponse): Promise<Authorization>;
    getVerifiedAccounts(authorization: Authorization, symbols?: string[]): VerifiedAddress[];
    getAuthorizationAccount(authorization: Authorization, type?: string, version?: string): VerifiedAddress | undefined;
    getOpenIdConfiguration(username?: string): Promise<any>;
    authorization(options?: AuthorizationOptions): Promise<Authorization>;
    user(options?: UserOptions): Promise<UserInfo>;
    buildLogoutRequest(options: LogoutOptions): Promise<LogoutRequest>;
    logout({ clientID, username, scope, resource, ...options }?: Partial<LogoutOptions>): Promise<void>;
    logoutCallback<T>(options?: LogoutCallbackOptions): Promise<T>;
    verifyLogoutResponse(request: LogoutRequest, response: LogoutResponse): Promise<void>;
}

import { UserInfo } from '../types';
import ApiError from './ApiError';
import { ApiOptions, AuthorizeRequest, AuthorizeResponse, AuthorizeWithDeviceRequest, AuthorizeWithDeviceResponse, IntrospectRequest, IntrospectResponse, JWKSRequest, JWKSResponse, LogoutRequest, PopupConfig, RevokeRequest, TokenRequest, TokenResponse, TokenWithAuthorizationCodeRequest, TokenWithClientCredentialsRequest, TokenWithDeviceCodeRequest, TokenWithPasswordRequest, TokenWithRefreshTokenRequest, TokenWithSAMLRequest, UserInfoRequest } from './types';
export default class Api {
    options: ApiOptions;
    static Error: typeof ApiError;
    constructor(options: ApiOptions);
    buildAuthorizeUrl(request: AuthorizeRequest): string;
    buildLogoutUrl(request: LogoutRequest): string;
    parseAuthorizeResponseFromFragment(url: string): AuthorizeResponse;
    parseAuthorizeResponseFromQuery(url: string): AuthorizeResponse;
    authorizeWithPopup(request: AuthorizeRequest, config?: PopupConfig): Promise<AuthorizeResponse>;
    authorizeWithDevice(request: AuthorizeWithDeviceRequest): Promise<AuthorizeWithDeviceResponse>;
    getToken(request: TokenRequest): Promise<TokenResponse>;
    introspect(request: IntrospectRequest): Promise<IntrospectResponse>;
    revoke(request: RevokeRequest): Promise<void>;
    userinfo(request: UserInfoRequest): Promise<UserInfo>;
    jwks(request: JWKSRequest): Promise<JWKSResponse>;
    getTokenWithAuthorizationCode(request: TokenWithAuthorizationCodeRequest): Promise<TokenResponse>;
    getTokenWithRefreshToken(request: TokenWithRefreshTokenRequest): Promise<TokenResponse>;
    getTokenWithDeviceCode(request: TokenWithDeviceCodeRequest): Promise<TokenResponse>;
    getTokenWithPassword(request: TokenWithPasswordRequest): Promise<TokenResponse>;
    getTokenWithSAML(request: TokenWithSAMLRequest): Promise<TokenResponse>;
    getTokenWithClientCredentials(request: TokenWithClientCredentialsRequest): Promise<TokenResponse>;
    private _buildUrl;
    private _buildRequest;
    private _validateResponse;
    private _fetchJSON;
}

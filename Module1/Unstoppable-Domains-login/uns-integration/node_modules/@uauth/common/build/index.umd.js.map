{"version":3,"file":"index.umd.js","sources":["../src/DefaultIPFSResolver.ts","../src/DefaultIssuerResolver.ts","../src/DefaultWebFingerResolver.ts","../src/version.ts","../src/MemoryDomainResolver.ts","../src/MemoryWebFingerResolver.ts","../src/JRD.ts"],"sourcesContent":["import {IPFSResolver} from './types'\n\nexport default class DefaultIPFSResolver implements IPFSResolver {\n  static defaultCreateUrl(cid: string, path: string): string {\n    return `https://${cid}.ipns.dweb.link${path.replace(/^\\/?/, '/')}`\n  }\n\n  constructor(public createURL = DefaultIPFSResolver.defaultCreateUrl) {}\n\n  async resolve(uri: string): Promise<string> {\n    let cid: string\n    let path: string\n    let protocol: string\n\n    if (uri.startsWith('/ipfs/') || uri.startsWith('/ipns/')) {\n      protocol = uri.substring(1, 5)\n      cid = uri.substring(6).split('/')[0]\n      path = uri.substring(6 + cid.length)\n    } else {\n      const url = new URL(uri)\n\n      if (\n        url.hash !== '' ||\n        url.password !== '' ||\n        url.port !== '' ||\n        url.search !== '' ||\n        url.username !== ''\n      ) {\n        throw new Error('invalid ipfs uri')\n      }\n\n      protocol = url.protocol.substring(0, 4)\n      cid = url.hostname\n      path = url.pathname\n    }\n\n    if (protocol !== 'ipfs') {\n      throw new Error('only ipfs is supported, (not ipns)')\n    }\n\n    return fetch(this.createURL(cid, path)).then(resp =>\n      resp.ok ? resp.text() : Promise.reject(new Error('bad response')),\n    )\n  }\n}\n","import {IssuerResolver, IssuerResolverOptions} from './types'\n\nexport default class DefaultIssuerResolver implements IssuerResolver {\n  constructor(public options: IssuerResolverOptions) {}\n\n  async resolve(username: string, fallbackIssuer: string) {\n    let user = ''\n    let domain: string\n    if (username.includes('@')) {\n      ;[user, domain] = username.split('@', 1)\n    } else {\n      domain = username\n    }\n\n    const rel = 'http://openid.net/specs/connect/1.0/issuer'\n\n    const jrd = await this.options.webfingerResolver.resolve(\n      domain,\n      user,\n      rel,\n      fallbackIssuer,\n    )\n\n    const link = jrd.links?.find(v => v.rel === rel)\n    if (!link || !link.href) {\n      throw new Error('bad jrd')\n    }\n\n    const config = await fetch(\n      link.href + '/.well-known/openid-configuration',\n    ).then(resp =>\n      resp.ok\n        ? resp.json()\n        : Promise.reject(new Error('bad openid-configuration response')),\n    )\n\n    return config\n  }\n}\n","import {isJRD} from './JRD'\nimport {JRDDocument, WebFingerRecord, WebFingerResolverOptions} from './types'\nimport {VERSION} from './version'\n\nif (typeof window !== 'undefined') {\n  const _w = window as any\n  _w.UAUTH_VERSION = _w.UAUTH_VERSION || {}\n  _w.UAUTH_VERSION.COMMON = VERSION\n}\n\nexport default class DefaultWebFingerResolver {\n  constructor(public options: WebFingerResolverOptions) {}\n\n  async resolve(\n    domain: string,\n    user: string,\n    rel: string,\n    fallbackIssuer: string,\n  ): Promise<JRDDocument> {\n    const webfingerKey = `webfinger.${user}.${rel}`\n\n    // console.log('domain:', domain)\n    // console.log('webfingerKey:', webfingerKey)\n\n    const records = await this.options.domainResolver.records(domain, [\n      webfingerKey,\n    ])\n\n    const resource = user ? `acct:${user}@${domain}` : `${domain}`\n\n    // console.log('record value:', records[webfingerKey])\n\n    if (!records[webfingerKey]) {\n      return {subject: resource, links: [{rel, href: fallbackIssuer}]}\n    }\n\n    const webfingerRecord: WebFingerRecord = JSON.parse(records[webfingerKey])\n\n    // console.log('webfingerRecord:', webfingerRecord)\n\n    let json\n    if (typeof webfingerRecord.host === 'string') {\n      json = await fetch(\n        '/.well-known/webfinger?' +\n          new URLSearchParams({resource, rel}).toString(),\n        {headers: {Host: webfingerRecord.host}},\n      ).then(resp =>\n        resp.ok\n          ? resp.json()\n          : Promise.reject(new Error('bad webfinger response')),\n      )\n    } else if (typeof webfingerRecord.uri === 'string') {\n      const url = new URL(webfingerRecord.uri)\n\n      switch (url.protocol) {\n        case 'http:':\n        case 'https:': {\n          json = await fetch(url.toString()).then(resp =>\n            resp.ok\n              ? resp.json()\n              : Promise.reject(new Error('bad webfinger response')),\n          )\n          break\n        }\n        case 'ipfs:': {\n          json = JSON.parse(\n            await this.options.ipfsResolver.resolve(webfingerRecord.uri),\n          )\n          break\n        }\n        case 'ipns:':\n        case 'swarm:':\n        default: {\n          throw new Error('uri scheme not supported')\n        }\n      }\n    } else if (typeof webfingerRecord.value === 'string') {\n      json = JSON.parse(webfingerRecord.value)\n    } else {\n      throw new Error('bad webfinger record')\n    }\n\n    if (!isJRD(json)) {\n      throw new Error('resolved document not jrd')\n    }\n\n    if (json.subject !== resource) {\n      throw new Error('resource invalid')\n    }\n\n    return json\n  }\n}\n","export const VERSION = \"2.3.0\";\n","import {DomainResolver} from './types'\n\nexport default class MemoryDomainResolver implements DomainResolver {\n  private map: Map<string, Record<string, string>> = new Map()\n\n  set(domain: string, records: Record<string, string>): void {\n    if (!this.map.has(domain)) {\n      this.map.set(domain, records)\n      return\n    }\n\n    this.map.set(domain, {...this.map.get(domain), ...records})\n  }\n\n  records = async (\n    domain: string,\n    keys: string[],\n  ): Promise<Record<string, string>> => {\n    const records = this.map.get(domain)\n\n    if (keys.length === 0) {\n      throw new Error('no keys')\n    }\n\n    if (!records) {\n      return {}\n    }\n\n    return keys.reduce((a, v) => {\n      a[v] = records[v] || ''\n      return a\n    }, {} as Record<string, string>)\n  }\n}\n","import {JRDDocument, WebFingerResolver} from './types'\n\nexport default class MemoryWebFingerResolver implements WebFingerResolver {\n  map = new Map<string, JRDDocument>()\n\n  set(domain: string, user: string, rel: string, document: JRDDocument): void {\n    this.map.set(`${domain}.${user}.${rel}`, document)\n  }\n\n  async resolve(\n    domain: string,\n    user: string,\n    rel: string,\n    fallbackIssuer: string,\n  ): Promise<JRDDocument> {\n    const jrd = this.map.get(`${domain}.${user}.${rel}`)\n\n    if (!jrd) {\n      return {subject: domain, links: [{rel, href: fallbackIssuer}]}\n    }\n\n    return jrd\n  }\n}\n","import {JRDDocument, JRDLink} from './types'\n\nexport function isJRDLink(json: any): json is JRDLink {\n  return true\n}\n\nexport function isJRD(json: any): json is JRDDocument {\n  return true\n}\n"],"names":["DefaultIPFSResolver","defaultCreateUrl","createURL","this","cid","path","replace","resolve","uri","protocol","startsWith","substring","split","length","url","URL","hash","password","port","search","username","Error","hostname","pathname","Promise","fetch","then","resp","ok","text","reject","DefaultIssuerResolver","options","fallbackIssuer","domain","user","includes","_username$split","rel","webfingerResolver","jrd","_jrd$links","link","links","find","v","href","json","pact","state","value","s","o","_settle","bind","observer","_Pact","prototype","onFulfilled","onRejected","callback","result","e","_this","window","_w","UAUTH_VERSION","COMMON","DefaultWebFingerResolver","_this2","webfingerKey","domainResolver","records","subject","resource","webfingerRecord","JSON","parse","host","URLSearchParams","toString","headers","Host","_fetch$then","_switch","_fetch$then2","ipfsResolver","_this$options$ipfsRes","_temp","_temp2","MemoryDomainResolver","map","Map","keys","get","reduce","a","set","has","_extends","MemoryWebFingerResolver","document"],"mappings":"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"}